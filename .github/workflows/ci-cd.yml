name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_REPOSITORY: prod-grocery-backend
  FRONTEND_REPOSITORY: prod-grocery-frontend

jobs:
  # Backend Tests and Build
  backend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend-python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Lint with flake8
      working-directory: ./backend-python
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      working-directory: ./backend-python
      run: |
        mypy . --ignore-missing-imports

    - name: Format check with black
      working-directory: ./backend-python
      run: |
        black --check .

    - name: Run tests
      working-directory: ./backend-python
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-python/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Build
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint
      working-directory: ./frontend
      run: npm run lint

    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Build
      working-directory: ./frontend
      run: npm run build

  # Mobile App Tests
  mobile-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile-app/package-lock.json

    - name: Install dependencies
      working-directory: ./mobile-app
      run: npm ci

    - name: Lint
      working-directory: ./mobile-app
      run: npm run lint

    - name: Type check
      working-directory: ./mobile-app
      run: npm run type-check

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    needs: [backend-test, frontend-test, mobile-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      working-directory: ./backend-python
      run: |
        docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA .
        docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$BACKEND_REPOSITORY:latest

    - name: Build and push frontend image
      working-directory: ./frontend
      run: |
        docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA .
        docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest

  # Deploy to AWS
  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy infrastructure
      run: |
        aws cloudformation deploy \
          --template-file aws/cloudformation/infrastructure.yaml \
          --stack-name grocery-management-prod \
          --parameter-overrides Environment=prod \
          --capabilities CAPABILITY_IAM

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster prod-grocery-cluster \
          --service prod-grocery-backend-service \
          --force-new-deployment

        aws ecs update-service \
          --cluster prod-grocery-cluster \
          --service prod-grocery-frontend-service \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster prod-grocery-cluster \
          --services prod-grocery-backend-service prod-grocery-frontend-service

  # Notify deployment status
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Cleanup old images
  cleanup:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup old ECR images
      run: |
        # Keep only last 10 images
        aws ecr list-images --repository-name $BACKEND_REPOSITORY --filter tagStatus=TAGGED --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`']' --output json | jq -r '.[].imageDigest' | head -n -10 | xargs -r aws ecr batch-delete-image --repository-name $BACKEND_REPOSITORY --image-ids imageDigest=
        
        aws ecr list-images --repository-name $FRONTEND_REPOSITORY --filter tagStatus=TAGGED --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`']' --output json | jq -r '.[].imageDigest' | head -n -10 | xargs -r aws ecr batch-delete-image --repository-name $FRONTEND_REPOSITORY --image-ids imageDigest=
