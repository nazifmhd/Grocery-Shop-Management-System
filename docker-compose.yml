version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: grocery_postgres
    environment:
      POSTGRES_DB: grocery_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-python/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grocery_network

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: grocery_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grocery_network

  # Backend API Server
  backend:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: grocery_backend
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_management
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=grocery_management
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_PROJECT=grocery-management-system
      
      # Phidata Configuration
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      
      # Payment Configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      
      # Email Configuration
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM_NAME=Grocery Management System
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # AWS Configuration (for production)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      
      # Hardware Integration
      - PRINTER_IP=${PRINTER_IP}
      - CASH_DRAWER_PORT=${CASH_DRAWER_PORT}
      - BARCODE_SCANNER_PORT=${BARCODE_SCANNER_PORT}
      
      # Development
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-python:/app
      - ./memgpt_data:/app/memgpt_data
      - ./chroma_db:/app/chroma_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - grocery_network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: grocery_frontend
    environment:
      # API Configuration
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_MCP_BRIDGE_URL=http://backend:8000
      
      # Payment Configuration
      - VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}
      
      # AI Configuration
      - VITE_GEMINI_API_KEY=${VITE_GEMINI_API_KEY}
      
      # Feature Flags
      - VITE_ENABLE_BARCODE_SCANNING=true
      - VITE_ENABLE_LOYALTY_PROGRAM=true
      - VITE_ENABLE_MOBILE_PAYMENTS=true
      - VITE_ENABLE_ANALYTICS=true
      - VITE_ENABLE_AI_FEATURES=true
      
      # Environment
      - VITE_NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - grocery_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: grocery_celery_worker
    command: celery -A workers.celery_worker worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_management
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-python:/app
      - ./memgpt_data:/app/memgpt_data
      - ./chroma_db:/app/chroma_db
    networks:
      - grocery_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: grocery_celery_beat
    command: celery -A workers.celery_worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_management
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-python:/app
    networks:
      - grocery_network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: grocery_flower
    command: celery -A workers.celery_worker flower --port=5555
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - grocery_network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: grocery_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - grocery_network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: grocery_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - grocery_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grocery_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - grocery_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  grocery_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
